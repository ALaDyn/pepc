<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE jube SYSTEM "<jube.dtd path>">
<jube>
   <benchmark name="PEPC Benchmark" outpath="../run/benchmark">

      <!-- ############################################################################################# -->
      <!-- The benchmark will copy all sources, compile PEPC and initiate a number of runs.              -->
      <!--    After runs are finished, a table of results may be printed can also be usedto perform a    -->
      <!--    correctness check of PEPC. NOTE THAT THIS SETUP IS TAILORED FOR MACHINES AT JSC.           -->
      <!-- Throughout this file, several different tags will be used to switch the benchmark's behaviour -->
      <!--    tag nocompile : copy binary of pepc-benchmark from source files                            -->
      <!--                    this will of course only work for the same MPI!                            -->
      <!--    tag check     : run pepc-benchmark with a correctness check                                -->
      <!--                    (this will only work if compiler/MPI match)                                -->
      <!--    tag weak      : run pepc-benchmark in a weak scaling setup (strong scaling is default)     -->
      <!--    tag stats     : run each benchmark with 5 iterations each to gather variations             -->
      <!--    tag allmpi    : run all 3 MPI libraries (default)                                          -->
      <!--    tag ps        : pick ParaStationMPI to run with                                            -->
      <!--    tag ompi      : pick OpenMPI to run with                                                   -->
      <!--    no tag        : by default, all sources will be copied, pepc-benchmark compiled, and the   -->
      <!--                    benchmark configuration will be launched. the compiled binary will be      -->
      <!--                    copied back onto the source tree for later reference.                      -->
      <!-- ############################################################################################# -->

      <!-- PARAMETER SETS ############################################################################## -->
      <!-- define all parameter sets we possibly use to benchmark -->
      <!-- test for system, only cluster part possible -->
      <parameterset name="system">
         <parameter name="systemname" mode="shell">printf "%s" `cat /etc/FZJ/systemname`</parameter>
         <parameter name="partition" mode="python">{
            "juwels": "batch",
            "jurecadc": "dc-cpu",
            "jusuf": "batch"}["${systemname}"]
         </parameter>
      </parameterset>

      <!-- all parameters are kept in a dedicated file -->
      <include tag="!CI" from="user_parameters.xml" path="parameterset" />
      <include tag="CI"  from="CI_parameters.xml"   path="parameterset" />

      <!-- FILE SETS ################################################################################### -->
      <!-- copy all source files -->
      <fileset name="sources">
         <copy directory="../.">makefile, src, tools</copy>
         <copy directory="../." name="makefile.defs">${makefile}</copy>
      </fileset>
      <!-- link or copy executable to JUBE steps -->
      <fileset name="executable">
         <link tag="!nocompile" rel_path_ref="internal">compile/bin/pepc-benchmark</link>
         <copy tag="nocompile" directory="../bin">pepc-benchmark</copy>
      </fileset>
      <!-- copy all files to run later -->
      <fileset name="runfiles">
         <copy directory=".">params.skel</copy>
         <copy directory=".">${job_script}</copy>
         <copy directory=".">correct_pinning.sh</copy>
      </fileset>

      <!-- SUBSTITUIONS ################################################################################ -->
      <!-- define the substitute sets for parameters above, to be enabled individually -->
      <!-- benchmarking case -->
      <substituteset tag="!check" name="inputsub">
         <iofile in="params.skel" out="params" />
         <sub source="##SETUP##" dest="'$mode'" />
         <sub source="##BOX##" dest=".true." />
         <sub source="##IO##" dest=".false." />
         <sub source="##THREADS##" dest="$workerthreads" />
         <sub source="##DIAG##" dest=".false." />
         <sub source="##DT##" dest="0.1e-1" />
         <sub source="##NT##" dest="10" />
         <sub source="##NPARTICLES##" dest="$particles" />
      </substituteset>
      <!-- correctness test -->
      <substituteset tag="check" name="inputsub">
         <iofile in="params.skel" out="params" />
         <sub source="##SETUP##" dest="'$mode'" />
         <sub source="##BOX##" dest=".false." />
         <sub source="##IO##" dest=".false." />
         <sub source="##THREADS##" dest="$workerthreads" />
         <sub source="##DIAG##" dest=".true." />
         <sub source="##DT##" dest="0.2e-1" />
         <sub source="##NT##" dest="$ntimesteps" />
         <sub source="##NPARTICLES##" dest="$particles" />
      </substituteset>
      <substituteset name="runsub">
         <iofile in="${job_script}" out="job.slurm" />
         <sub source="##PARTITION##" dest="$partition" />
         <sub source="##NODES##" dest="$nodes" />
         <sub source="##TASKSPNODE##" dest="$taskspnode" />
         <sub source="##THREADS##" dest="$threads" />
         <sub source="##WORKERTHREADS##" dest="$workerthreads" />
         <sub source="##SMT_THREADS##" dest="$thread_places" />
         <sub source="##MODULES##" dest="$load_modules" />
      </substituteset>
      <substituteset name="walksub">
         <iofile in="src/frontends/pepc-benchmark/makefile.frontend" out="src/frontends/pepc-benchmark/makefile.frontend" />
         <sub source="WALK = pthreads" dest="WALK = $walk" />
      </substituteset>

      <!-- JOB STEPS ################################################################################### -->
      <!-- compile the code, apply substitutions as necessary -->
      <step name="compile">
         <use>system</use>
         <!-- load modules -->
         <use>stageset</use>
         <do>${load_modules}</do>
         <use>walkset</use>
         <use tag="!nocompile">walksub</use>
         <use tag="!nocompile">sources</use>
         <!-- compile sources -->
         <do tag="!nocompile" done_file="bin/pepc-benchmark">module list; make allclean pepc-benchmark</do>
         <!-- copy binary back onto original source tree -->
         <do tag="!nocompile" >test -d ${jube_benchmark_home}/../bin || mkdir ${jube_benchmark_home}/../bin</do>
         <do tag="!nocompile" >cp ${jube_wp_abspath}/bin/pepc-benchmark ${jube_benchmark_home}/../bin/.</do>
      </step>
      <!-- run the binary, apply substitutions as necessary -->
      <step tag="!stats" name="run" depend="compile" iterations="1">
         <use>system</use>
         <use>nodeset</use>
         <use>modeset</use>
         <use>executable</use>
         <use>runfiles</use>
         <use>inputsub</use>
         <use>runsub</use>
         <!-- load modules -->
         <do>${load_modules}</do>
         <do done_file="ready">sbatch -A ${SBATCH_ACCOUNT} job.slurm</do>
      </step>
      <step tag="stats"  name="run" depend="compile" iterations="5">
         <use>system</use>
         <use>nodeset</use>
         <use>modeset</use>
         <use>executable</use>
         <use>runfiles</use>
         <use>inputsub</use>
         <use>runsub</use>
         <!-- load modules -->
         <do>${load_modules}</do>
         <do done_file="ready">sbatch -A ${SBATCH_ACCOUNT} job.slurm</do>
      </step>

      <!-- OUTPUT ANALYSIS ############################################################################# -->
      <!-- define timing patternset -->
      <!-- Regex pattern -->
      <patternset tag="!check" name="timing_pattern">
         <pattern unit="secs" name="wallclock"     type="float"               >===== total run time \[s\]:\s+${jube_pat_fp}</pattern>
         <pattern unit="secs" name="tree_walk"     type="float"               >====== tree walk time\s+:\s+${jube_pat_fp}</pattern>
         <pattern unit="secs" name="tree_grow"     type="float"               >====== tree grow time\s+:\s+${jube_pat_fp}</pattern>
         <pattern unit="secs" name="comm_recv"     type="float"               >====== tree comm recv\s+:\s+${jube_pat_fp}</pattern>
         <pattern unit="secs" name="comm_reqs"     type="float"               >====== tree comm reqs\s+:\s+${jube_pat_fp}</pattern>
         <pattern unit="secs" name="step_time"     type="float"               >== time in step\s+\[s\]\s+:\s+${jube_pat_fp}</pattern>
         <pattern unit="secs" name="sum_steps"     type="float"  mode="python">${step_time_sum}-${step_time}</pattern>
         <!--pattern unit="secs" name="sum_steps"     type="float"  mode="python">0</pattern-->
         <pattern unit=""     name="total_threads" type="int"    mode="python">${nodes}*${taskspnode}*${threads}</pattern>
         <pattern unit=""     name="part_per_thrd" type="float"  mode="python">${particles}/(${nodes}*${taskspnode}*${workerthreads})</pattern>
         <pattern unit=""     name="chksum"        type="stirng"              >revision\s+\[${jube_pat_wrd}\]</pattern>
      </patternset>
      <!-- sample output from PEPC will include:
           ====== computing step  :           0  // many of those
           ====== simulation time :  0.0000E+00
           ====== tree grow time  :  3.7220E-01
           ====== tree walk time  :  7.2144E+00
           == [pusher] push particles 
           == time in step [s]                              :   1.2952E+01
                      t_all =    12.9479424953 s
                      t_tot =     0.0000000000 s
           [...]
           ===== total run time [s]:   2.8961E+03
           [...]
       -->
      <patternset tag="check" name="timing_pattern">
         <pattern unit="secs" name="wallclock" type="float"               >===== total run time \[s\]:\s+${jube_pat_fp}</pattern>
         <pattern unit="secs" name="tree_walk" type="float"               >====== tree walk time\s+:\s+${jube_pat_fp}</pattern>
         <pattern unit="secs" name="tree_grow" type="float"               >====== tree grow time\s+:\s+${jube_pat_fp}</pattern>
         <pattern unit="secs" name="step_time" type="float"               >== time in step.*:\s+${jube_pat_fp}</pattern>
         <pattern             name="l2_test"   type="float"               >== \[direct test\] L2 error in probed particles\s+:\s+${jube_pat_fp}</pattern>
         <pattern unit="a.u." name="egy_tot"   type="float"               >== \[energies\]\s+energy:\s+${jube_pat_fp}</pattern>
         <pattern             name="n_peak"    type="int"                 >== \[histogram\] number of peaks found:\s+${jube_pat_int}</pattern>
         <pattern             name="check"     type="string"              >== \[histogram\] check\s+:\s+${jube_pat_wrd}</pattern>
         <pattern unit="%"    name="egy_drop"  type="float"  mode="python">(${egy_tot_max}-${egy_tot_min})/${egy_tot_max} * 100</pattern>
      </patternset>
      <!-- sample output from PEPC will include:
           ====== computing step  :           0  // many of those
           ====== simulation time :  0.0000E+00
           ====== tree grow time  :  2.9118E-01
           ====== tree walk time  :  3.5322E-01
           ====== tree comm reqs  :  3.5733E-02
           ====== tree comm recv  :  1.0981E-01
           == [write particles] time in vtk output [s]      :   1.0478E+00
           [...]
           == [direct test] L2 error in probed particles    :   1.8615E-07
           == [direct test] time in test [s]                :   1.1188E+02
           [...]
           == [energies]          kinetic energy:   1.4306E-07
           == [energies]        potential energy:   1.6119E+00
           == [energies]                  energy:   1.61185576E+00
           == [energies]        maximum velocity:   4.3941E-05
           == [energies] maximum radial distance:   3.8901E+01
           == [histogram] compute local histogram 
           == [histogram] number of peaks found: 1
           [...]
           == time in step [s]                              :   1.2952E+01
                      t_all =    12.9479424953 s
                      t_tot =     0.0000000000 s
           [...]
           ===== total run time [s]:   2.8961E+03
           [...]
       -->

      <!-- TABLE OUTPUT ################################################################################ -->
      <!-- Analyse timings -->
      <!-- It gets confusing here, bear with me: the first time step is 'special', so we want to ignore it.-->
      <!-- For single iterations of JUBE, we cut data from the first timestep via JUBE, c.f. $sum_steps.   -->
      <!-- For multiple iterations, so proper statistics, we can't do that, so we use a different log file -->
      <!-- that has the first time step removed alltogether. For plotting time series and alike we still   -->
      <!-- keep both log files.                                                                            -->
      <analyser name="analysis">
         <use>timing_pattern</use> <!-- use existing patternset -->
         <analyse step="run">
            <!-- file which should be scanned -->
            <file tag="!stats">log</file>
            <file tag="stats">log.filtered</file>
         </analyse>
      </analyser>

      <!-- Create result table -->
      <include tag="!CI" from="user_parameters.xml" path="result" />
      <include tag="CI"  from="CI_parameters.xml"   path="result" />

   </benchmark>
</jube>
<!-- vim: set tabstop=3 shiftwidth=3 expandtab :-->
