&pepcbreakup

! resuming run?
resume = REPLACE_RESUME

! resuming from which time step?
itime_in = REPLACE_TIMEIN

! Set OMP threads
init_omp_threads = 2

! allocated wall time. Change this to reflect the wall time in job_script.
! Note that depending on the number of MPI ranks involved, overhead due to MPI
! will offset the code's internal clock versus wall clock of JURECA accounting.
! Recommended to use a  lower 'i_wall_time' than requested wall clock in job_script.
i_wall_time = 23:50:00

! total number of particles
tnp = REPLACE_TNP
H1s = REPLACE_VP1
H2s = REPLACE_VP2

! initial electron temperature (K)
init_temperature = 373.15

! pressure of vessel (Pa)
pressure = 0.002 !333.31

! calculation method for electron scattering angle distribution
!       0: random scatter
!       1: Vahedi & Surendra 1995
!       2: Okhrimovvsky 2022
scatter_mode = 0

!NOTE: Altering the collision cross sections should be done in 2 places.
!      1st is in `pepc.f90`, where one can add/remove cross sections 
!      by adding or removing `set_cross_section_table()`.
!      This must then be followed by altering `collision_update()`
!      in `module_integrator.f90`. Calculations of collision probabilities
!      starts by calculating the normalised `CS_vector` variable.
!      Variable `i` that follows, decides the case on how to handle 
!      the particles' velocities. Cases will need to be added if cross
!      sections are added.  

! number of time steps
nt = REPLACE_NSTEP

! time step (in picoseconds)
dt = 17.5

! diagnostics and output interval
diag_interval = 1

! turn data and domain output on/off
particle_output = .true.
domain_output = .false.
particle_mpi_output = .true.

! Compute post-processed particles statistics.
! Outputs at prescribed `diag_interval` and when `particle_output == .true.`
! Output only for `sim_type == 1` below.
! Output types:
! diag_type = 0 :: nothing
! diag_type = 1 :: 2D poloidal plane projection of simulated charges distribution
! diag_type = 2 :: Averages of merged particle weights along toroidal angle
! diag_type = 3 :: min and max of merged particle weights along toroidal angle
! diag_type = 4 :: distribution of simulated particles' unit vector angles
! diag_type = 5 :: averaged charged particle velocity along toroidal angle
! diag_type = 6 :: global parallel + perpend. velocity distribution of ions + electrons
diag_type = 6

! simulation type: 0 = Electrode Plates, 1 = Tokamak Setting
sim_type = 1

!=============================Tokamak Simulation=================================
! tokamak torus descriptions (in meters)
major_radius = 5.8 !2.9
minor_radius = 1.0 !0.5

! Electron seeding method:
! 0 = randomly distributed in torus
! 1 = seeded on a plane
mode = 0

! current used to approximate B_tf at major_radius
Itf = 7.524e7 !15.048e7_kind_physics !3.62e7_8 obsolete 

! txt file that contains the poloidal coil parameters
coil_data_file = "./4_coil_perturbed_null.txt"

! loop voltage along tokamak torus(V/m)
V_loop = 22.0 !11.0

!==============================Electrode Plates===================================
! Only for Electrode Plates, plate distance (in meters)
d = 0.0011870845

! Only for Electrode Plates, injected electrons per step
electron_num = 0 !20

! size of the simulation box
plasma_dimensions = 0.05 0.05 0.025 !1.0 1.0 1.0

! external electric field (in V/m)
external_e = 0.0 0.0 0.0 !100000.0

!==============================Density mesh output================================

! Record only a slice of the particles
slice_parts = .false.

! Density grid for interpolation on?
density_output = .true.

! Mesh mode: 0 - for rectilinear grids
!          : 1 - use an externally generated unstructured tetrahedral mesh.
mesh_mode = 1

! If mesh_mode set to 1, provide the full path of the .msh file (Version 4 gmsh).
mesh_name = "./scripting.msh"

! Density grid definitions, only required with 'density_output' == .true. AND 
! mesh_mode == 0
! Number of cells in x,y,z direction.
x_cell = 215 ! 43
y_cell = 215 ! 43
z_cell = 50 ! 10

! Define the extent of the density grid (meters)
minimum_x = -7.56
minimum_y = -7.56
minimum_z = -1.76
x_length = 15.12
y_length = 15.12
z_length = 3.52

!===========================Particle Merging=========================================
! Due to the experimental nature of the merging algorithm,
! a choice was made to enable or disable it through precompilation options.
! Ensure that makefile.frontend in `src/frontends/pepc-breakup/` has
! `-DMERGE_PARTICLES` in CPPFLAGS variable.
! Only then, will the following variables taken into effect.

! Triggers merging if number of simulated bodies is higher than this value.
merging_threshold_tnp = 7000000 

! Number of time steps which merging will not reoccur after the most recent instance. 
relaxation_steps = 250000 

! Choosing the merging method:
! merge_type = 0 :: aggressive merging
! merge_type = 1 :: merging focuses on simulated bodies that has low weights
merge_type = 0
!===================================================================================

! turn particle filtering (leaving simulation box) on/off
reflecting_walls = .false.

! turn direct summantion test on/off
particle_test = .false.

/

&calc_force_coulomb
! 3D coulomb
force_law  = 3
! BH-mac
mac_select = 0
! theta = 0.0
theta2     = 0.09
! eps squared
eps2 = 1e-4
/

&libpepc
 num_threads = 11
 debug_level = 0
 np_mult = -100.0

! Choose sorting routine and load balancing
! 0: no load balancing, 1: load balancing
 weighted = 1

! type of space-filling curve, 0=Z-curve, 1=Hilbert-curve
 curve_type = 1

! increase the factor to allow for larger node array size. Supports larger number of new particles.
 interaction_list_length_factor = 4
/

&walk_para_pthreads
 max_particles_per_thread = 100
/

&walk_para_pthreads_clustered
  max_clusters_per_thread = 100
  max_particles_per_cluster = 1
/
