!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
coinFlip10	integer32.f90	/^   subroutine coinFlip10(/;"	s	program:integer32
coinFlip10	integer64.f90	/^   subroutine coinFlip10(/;"	s	program:integer64
coinFlipScalar	integer32.f90	/^   subroutine coinFlipScalar(/;"	s	program:integer32
coinFlipScalar	integer64.f90	/^   subroutine coinFlipScalar(/;"	s	program:integer64
endTime	kurtosisDouble.f90	/^   real( kind = c_double ) :: startTime, endTime$/;"	v	program:kurtosisDouble
endTime	kurtosisSingle.f90	/^   real( kind = c_double ) :: startTime, endTime$/;"	v	program:kurtosisSingle
endTime	piDouble.f90	/^   real( kind = c_double ) :: startTime, endTime$/;"	v	program:piDouble
endTime	piSingle.f90	/^   real( kind = c_double ) :: startTime, endTime$/;"	v	program:piSingle
excessKurtosis1000	kurtosisDouble.f90	/^   real( kind = c_double ) function excessKurtosis1000(/;"	f	program:kurtosisDouble
excessKurtosis1000	kurtosisSingle.f90	/^   real( kind = c_float ) function excessKurtosis1000(/;"	f	program:kurtosisSingle
excessKurtosisFour	kurtosisSingle.f90	/^   real( kind = c_float ) function excessKurtosisFour(/;"	f	program:kurtosisSingle
excessKurtosisScalar	kurtosisDouble.f90	/^   real( kind = c_double ) function excessKurtosisScalar(/;"	f	program:kurtosisDouble
excessKurtosisScalar	kurtosisSingle.f90	/^   real( kind = c_float ) function excessKurtosisScalar(/;"	f	program:kurtosisSingle
excessKurtosisTwo	kurtosisDouble.f90	/^   real( kind = c_double ) function excessKurtosisTwo(/;"	f	program:kurtosisDouble
excessKurtosisTwo	kurtosisSingle.f90	/^   real( kind = c_float ) function excessKurtosisTwo(/;"	f	program:kurtosisSingle
ik	kurtosisDouble.f90	/^   integer, parameter :: ik /;"	v	program:kurtosisDouble
ik	kurtosisSingle.f90	/^   integer, parameter :: ik /;"	v	program:kurtosisSingle
ik	piDouble.f90	/^   integer, parameter :: ik /;"	v	program:piDouble
ik	piSingle.f90	/^   integer, parameter :: ik /;"	v	program:piSingle
integer32	integer32.f90	/^program integer32$/;"	p
integer64	integer64.f90	/^program integer64$/;"	p
kurtosisDouble	kurtosisDouble.f90	/^program kurtosisDouble$/;"	p
kurtosisSingle	kurtosisSingle.f90	/^program kurtosisSingle$/;"	p
mu	kurtosisDouble.f90	/^   real( kind = c_double ), parameter :: mu /;"	v	program:kurtosisDouble
mu	kurtosisSingle.f90	/^   real( kind = c_float ), parameter :: mu /;"	v	program:kurtosisSingle
numberOfPoints	piDouble.f90	/^   integer( kind = ik ), parameter :: numberOfPoints /;"	v	program:piDouble
numberOfPoints	piSingle.f90	/^   integer( kind = ik ), parameter :: numberOfPoints /;"	v	program:piSingle
numberOfSamples	kurtosisDouble.f90	/^   integer( kind = ik ), parameter :: numberOfSamples /;"	v	program:kurtosisDouble
numberOfSamples	kurtosisSingle.f90	/^   integer( kind = ik ), parameter :: numberOfSamples /;"	v	program:kurtosisSingle
pi2000	piDouble.f90	/^   real( kind = c_double ) function pi2000(/;"	f	program:piDouble
pi2000	piSingle.f90	/^   real( kind = c_float ) function pi2000(/;"	f	program:piSingle
piDouble	piDouble.f90	/^program piDouble$/;"	p
piFour	piSingle.f90	/^   real( kind = c_float ) function piFour(/;"	f	program:piSingle
piScalar	piDouble.f90	/^   real( kind = c_double ) function piScalar(/;"	f	program:piDouble
piScalar	piSingle.f90	/^   real( kind = c_float ) function piScalar(/;"	f	program:piSingle
piSingle	piSingle.f90	/^program piSingle$/;"	p
piTwo	piDouble.f90	/^   real( kind = c_double ) function piTwo(/;"	f	program:piDouble
piTwo	piSingle.f90	/^   real( kind = c_float ) function piTwo(/;"	f	program:piSingle
scalarDouble	unifiedInterface.f90	/^   real( kind = c_double ) :: scalarDouble$/;"	v	program:unifiedInterface
scalarInt32	unifiedInterface.f90	/^   integer( kind = c_int32_t ) :: scalarInt32$/;"	v	program:unifiedInterface
scalarInt64	unifiedInterface.f90	/^   integer( kind = c_int64_t ) :: scalarInt64$/;"	v	program:unifiedInterface
scalarNormDouble	unifiedInterface.f90	/^   real( kind = c_double ) :: scalarNormDouble$/;"	v	program:unifiedInterface
scalarNormSingle	unifiedInterface.f90	/^   real( kind = c_float ) :: scalarNormSingle$/;"	v	program:unifiedInterface
scalarSingle	unifiedInterface.f90	/^   real( kind = c_float ) :: scalarSingle$/;"	v	program:unifiedInterface
sigma	kurtosisDouble.f90	/^   real( kind = c_double ), parameter :: sigma /;"	v	program:kurtosisDouble
sigma	kurtosisSingle.f90	/^   real( kind = c_float ), parameter :: sigma /;"	v	program:kurtosisSingle
startTime	kurtosisDouble.f90	/^   real( kind = c_double ) :: startTime,/;"	v	program:kurtosisDouble
startTime	kurtosisSingle.f90	/^   real( kind = c_double ) :: startTime,/;"	v	program:kurtosisSingle
startTime	piDouble.f90	/^   real( kind = c_double ) :: startTime,/;"	v	program:piDouble
startTime	piSingle.f90	/^   real( kind = c_double ) :: startTime,/;"	v	program:piSingle
state	integer32.f90	/^   integer(kind=frand123_state_/;"	v	program:integer32
state	integer64.f90	/^   integer(kind=frand123_state_/;"	v	program:integer64
state	kurtosisDouble.f90	/^   integer(kind=frand123_state_/;"	v	program:kurtosisDouble
state	kurtosisSingle.f90	/^   integer(kind=frand123_state_/;"	v	program:kurtosisSingle
state	piDouble.f90	/^   integer(kind=frand123_state_/;"	v	program:piDouble
state	piSingle.f90	/^   integer(kind=frand123_state_/;"	v	program:piSingle
state	unifiedInterface.f90	/^   integer(kind=frand123_state_/;"	v	program:unifiedInterface
unifiedInterface	unifiedInterface.f90	/^program unifiedInterface$/;"	p
var1000	kurtosisDouble.f90	/^   real( kind = c_double ) :: varScalar, varTwo, var1000$/;"	v	program:kurtosisDouble
var1000	kurtosisSingle.f90	/^   real( kind = c_float ) :: varScalar, varTwo, varFour, var1000$/;"	v	program:kurtosisSingle
varFour	kurtosisSingle.f90	/^   real( kind = c_float ) :: varScalar, varTwo, varFour,/;"	v	program:kurtosisSingle
varPi2000	piDouble.f90	/^   real( kind = c_double ) :: varPiScalar, varPiTwo, varPi2000$/;"	v	program:piDouble
varPi2000	piSingle.f90	/^   real( kind = c_float ) :: varPiScalar, varPiTwo, varPiFour, varPi2000$/;"	v	program:piSingle
varPiFour	piSingle.f90	/^   real( kind = c_float ) :: varPiScalar, varPiTwo, varPiFour,/;"	v	program:piSingle
varPiScalar	piDouble.f90	/^   real( kind = c_double ) :: varPiScalar,/;"	v	program:piDouble
varPiScalar	piSingle.f90	/^   real( kind = c_float ) :: varPiScalar,/;"	v	program:piSingle
varPiTwo	piDouble.f90	/^   real( kind = c_double ) :: varPiScalar, varPiTwo,/;"	v	program:piDouble
varPiTwo	piSingle.f90	/^   real( kind = c_float ) :: varPiScalar, varPiTwo,/;"	v	program:piSingle
varScalar	kurtosisDouble.f90	/^   real( kind = c_double ) :: varScalar,/;"	v	program:kurtosisDouble
varScalar	kurtosisSingle.f90	/^   real( kind = c_float ) :: varScalar,/;"	v	program:kurtosisSingle
varTwo	kurtosisDouble.f90	/^   real( kind = c_double ) :: varScalar, varTwo,/;"	v	program:kurtosisDouble
varTwo	kurtosisSingle.f90	/^   real( kind = c_float ) :: varScalar, varTwo,/;"	v	program:kurtosisSingle
vecDouble	unifiedInterface.f90	/^   real( kind = c_double ), dimension( 3 ) :: vecDouble$/;"	v	program:unifiedInterface
vecInt32	unifiedInterface.f90	/^   integer( kind = c_int32_t ), dimension( 3 ) :: vecInt32$/;"	v	program:unifiedInterface
vecInt64	unifiedInterface.f90	/^   integer( kind = c_int64_t ), dimension( 3 ) :: vecInt64$/;"	v	program:unifiedInterface
vecNormDouble	unifiedInterface.f90	/^   real( kind = c_double ), dimension( 3 ) :: vecNormDouble$/;"	v	program:unifiedInterface
vecNormSingle	unifiedInterface.f90	/^   real( kind = c_float ), dimension( 3 ) :: vecNormSingle$/;"	v	program:unifiedInterface
vecSingle	unifiedInterface.f90	/^   real( kind = c_float ), dimension( 3 ) :: vecSingle$/;"	v	program:unifiedInterface
