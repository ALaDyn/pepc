stages:
  - build
    #   - test
    #   - html     # this run doxygen (prefer FORD)
    #   - deploy   # this could push doxygen to pages

# run a before_script for all that installs OpenMPI
default:
  before_script:
    - apt update -qq || echo "apt udpate failed"
    - apt install -y -qq openmpi-bin libopenmpi-dev exuberant-ctags || echo "apt install failed - to be ignored for now"
    - which mpif90

# build binary to check compilation, creating MPI binary for a number of frontends
build:pepc-mini:
  stage: build
  tags:
    - public-docker
  image: gcc:latest
  script:
    - ln -s makefiles/makefile.defs.GCC makefile.defs
    - make pepc-mini

# build pepc-essential with all available walks to see if any of those fail
build:pepc-essential:
  stage: build
  tags:
    - public-docker
  image: gcc:latest
  script:
    - ln -s makefiles/makefile.defs.GCC makefile.defs
    - echo "WALK = pthreads" >> src/frontends/pepc-essential/makefile.frontend
    - make pepc-essential
    - echo "WALK = pthreads_clustered" >> src/frontends/pepc-essential/makefile.frontend
    - make pepc-essential
    - echo "WALK = openmp" >> src/frontends/pepc-essential/makefile.frontend
    - make pepc-essential
    - echo "WALK = simple" >> src/frontends/pepc-essential/makefile.frontend
    - make pepc-essential

build:pepc-benchmark:
  stage: build
  tags:
    - public-docker
  image: gcc:latest
  script:
    - ln -s makefiles/makefile.defs.GCC makefile.defs
    - make pepc-benchmark

build:pepc-breakup:
  stage: build
  tags:
    - public-docker
  image: gcc:latest
  script:
    - ln -s makefiles/makefile.defs.GCC makefile.defs
    - make pepc-breakup

build:pepc-kh:
  stage: build
  tags:
    - public-docker
  image: gcc:latest
  script:
    - ln -s makefiles/makefile.defs.GCC makefile.defs
    - make pepc-kh
