#### Stages for this pipeline
stages:
  - image           # build updated image for runner
  - build_libs      # build libraries
  - build_frontends # build frontends
    #   - test
    #   - html      # this run doxygen (prefer FORD)
    #   - deploy    # this could push doxygen to pages

#### Build PEPC and it's libraries
# Template for building
.build_template: &build_template
  tags:
    - public-docker
  image: "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME-build-image:latest"

# Build libsl and libOPA ahead of frontends
libraries:
  stage: build_libs
  <<: *build_template
  script:
    # Build for GCC
    - ln -s makefiles/makefile.defs.GCC makefile.defs
    - make libsl libopa
  artifacts:
    when: on_success
    expire_in: 1h
    paths:
      - lib

# Build a number of frontends
frontends:
  stage: build_frontends
  parallel:
    matrix:
      - TARGET: "pepc-mini"
      - TARGET: "pepc-benchmark"
      - TARGET: "pepc-breakup"
      - TARGET: "pepc-v"
      # Build pepc-essential with all available walks to see if any of those fail
      - TARGET: pepc-essential
        WALK: [pthreads, pthreads_clustered, openmp, simple]
      # Build all available frontends to see a list of working ones
      # (ditch others in favour of this step?)
      - TARGET: "all"
  <<: *build_template
  needs: ["libraries"]
  dependencies:
    - libraries
  script:
    - echo "Building PEPC with frontend $TARGET and walk $WALK"
    # Build for GCC
    - ln -s makefiles/makefile.defs.GCC makefile.defs
    # Avoid building libs again
    - touch lib/*
    # Possibly force the walk we want to build for
    - |
      if [ -z $WALK ]
      then
         echo "using walk from sources"
      else
         echo "WALK = $WALK" >> src/frontends/$TARGET/makefile.frontend
      fi
    - make $TARGET

#### Create new image from a changed Dockerfile
docker_image:
  stage: image
  tags:
    - public-docker
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    IMAGE_COMMIT_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME-build-image:$CI_COMMIT_SHORT_SHA
    IMAGE_LATEST_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME-build-image:latest
  script:
    - echo $CI_REGISTRY
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --no-cache=true --pull -t $IMAGE_COMMIT_TAG .
    - docker push $IMAGE_COMMIT_TAG
    - docker tag $IMAGE_COMMIT_TAG $IMAGE_LATEST_TAG
    - docker push $IMAGE_LATEST_TAG
  rules:
    # Run when triggered and a varible is set
    - if: $FORCE_DOCKER_IMAGE == "true"
    # Run when committing to a branch and changing Dockerfile
    - if: $CI_COMMIT_BRANCH
      changes:
        - Dockerfile
    # Run when merging and changing Dockerfile
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - Dockerfile
