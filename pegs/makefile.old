# 64-bit hardware

#
#  Makefile for treemp and test programs
#


#DBFLAGS = -g -Rabp -ev  -q64 -qrealsize=8  -qsuffix=f=f90 -qcheck
#LDFLAGS = -q64 -qrealsize=8  -g 
# For apprentice
#FFLAGS =   -eA -m4 -O2,inline4
#LDFLAGS = -lpmpi -Xm -lapp

## For IBM AIX compiler
#FFLAGS = -g -q64 -qrealsize=8 -qsuffix=f=f90 -qcheck  
## Optimised
#FFLAGS =  -q64 -qrealsize=8 -qsuffix=f=f90  -O4 -Q -qipa -qarch=pwr4 -qstrict -qreport  -qlist -qsource -I/usr/local/include 

IPA=-qipa=inline=key2addr:inline=make_hashentry:inline=key2node:inline=next_node:inline=key_local
PG=-pg -qfullpath
DB= -g -qfullpath ## -bnoquiet
HPM = -lhpm
LISTING=-qreport -qlist -qlistopt -qsource 
#MPITRACE= -L/usr/local/beta/lib -lmpitrace
#MPITRACE= -L/usr/local/beta/lib -lmpiprof
#MPITRACE= -L/usr/local/beta/lib  -lmpihpm -lpmapi
FFLAGS1 = -q64 -qrealsize=8 -qsuffix=f=f90 -qsuffix=cpp=F90  
TUNE= -qarch=pwr4 -qtune=pwr4 -O4 $(IPA) 
# $(PG) $(HPM)

FFLAGS =  $(FFLAGS1) $(DB) $(TUNE) 


#ANALYS = -lpmpi -Xm -lpat pat.cld

# Visit libraries
#
VISITLIBS=-L/usr/local/beta/visit-2.0b/lvisit/apis/spk4 -llvisit_spk -L/usr/local/beta/visit-2.0b/lvisit/lib -llvisit -L/usr/local/beta/visit-2.0b/lib -lvisit

LDFLAGS = $(VISITLIBS) $(MPITRACE)
RANLIB  = ranlib
libdir  = .
AR      = ar -X64
LIBPEPC = -L$(libdir) -llpepc
pepclib = liblpepc.a

.SUFFIXES: .f90


FC = /usr/bin/mpxlf90_r


# -------------------------------------------------------------------------------------------
#
# Pepc library

PEPCMOD.f90 =  treevars.f90 utils.f90 my_mpidefs.f90
PEPCSRC.f90 =  make_domains.f90 setup_arrays.f90 \
		tree_build.f90  make_branches.f90 tree_fill.f90 tree_properties.f90 \
		tree_walk.f90	tree_prefetch.f90 sum_force.f90 \
		make_hashentry.f90 get_address.f90  get_node.f90 key_test.f90 get_next_node.f90 \
		open_files.f90 close_files.f90	\
	        diagnose_tree.f90 check_table.f90 \
		draw_domains.f90 draw_tree2d.f90 draw_lists.f90

pepcobjs = $(PEPCSRC.f90:.f90=.o)
pepcmods =  $(PEPCMOD.f90:.f90=.o)

#  compile mode for PEPC routines 
#
$(pepcmods):   
	$(FC) -c $(FFLAGS) $(TUNE)  $<
$(pepcobjs):   
	$(FC) -c $(FFLAGS) $(TUNE) $<

# -------------------------------------------------------------------------------------------
#
#  Source code for pgrav

PGRAVMOD.f90 =  physvars.f90    
PGRAVSRC.f90 =	pegs.f90 \
		setup.f90 \
		configure.f90  \
		energy_cons.f90 potenergy.f90 kinenergy.f90\
		forces.f90 \
		velocities.f90 push.f90 \
		diagnostics.f90 dump.f90 \
		densities.f90 pot_grid.f90 slices.f90 \
		vis_parts.f90 vis_fields.f90 vis_steer.f90 \
		stars.f90 

# Names of object files derived from sources

pgravobjs = $(PGRAVSRC.f90:.f90=.o)
pgravmods =  $(PGRAVMOD.f90:.f90=.o)

#  compile mode for pgrav objects and modules
#

$(pgravmods):    
	$(FC) -c $(FFLAGS) $(DBFLAGS) $<
$(pgravobjs):    
	$(FC) -c $(FFLAGS) $(VISITLIBS) $(DBFLAGS) $<

.f90.o:
	$(FC) -c $(FFLAGS) $(VISITLIBS) $(DBFLAGS) $<

# -----------------------------------------------------------------------------------------
#
#  targets

all:	lpepc pegs 

pegs:	$(pgravobjs) $(pgravmods) $(pepcmods) $(pepclib)
	@echo "\n Creating pegs binary ...\n"
	$(FC)  $(FFLAGS) $(LDFLAGS) $(LIBPEPC) -o $@ $(pgravobjs) $(pgravmods) $(pepcmods)
	@echo "... done\n"

pgrav:	$(pgravobjs) $(pgravmods) $(pepcmods) $(pepclib)
	@echo "\n Creating pgrav binary ...\n"
	$(FC)  $(FFLAGS) $(LDFLAGS) $(LIBPEPC) -o $@ $(pgravobjs) $(pgravmods) $(pepcmods)
	@echo "... done\n"

$(pepclib): lpepc
lpepc:  $(pepcobjs) $(pepcmods)
	@echo "\n Creating PEPC library ...\n"
	rm -f liblpepc.a
	$(AR) q liblpepc.a $(pepcobjs)
	$(RANLIB) liblpepc.a
	@echo "... done\n"


debug:	$(OBJECTS)
	@echo "Loading object files using flags $(DBFLAGS)"
	$(FC) $(LDFLAGS)  $(VISITLIBS) $(DBFLAGS)  -o $@ $(OBJECTS)

slicer: ppfields.o
	$(FC)  $(FFLAGS1) -o $@ ppfields.o 


clean:
	/bin/rm -f  *% *~ rand *.o *.pif core pgrav *.mod 

cleanall: 
	/bin/rm -f liblpepc.a debug pgrav *.o core

depend:
	f90depend -u -I/usr/lpp/ppe.poe/include/thread *.f90
default:  all

### DO NOT DELETE OR EDIT THIS LINE
# Everything from here on down is generated by f90depend
# so do NOT add any translation rules below here.

#--- Include-Dependencies

my_mpidefs.o: /usr/lpp/ppe.poe/include/thread/mpif.h


#--- Module-Dependencies

boundaries.o: treevars.o
check_table.o: treevars.o utils.o
close_files.o: treevars.o
configure.o: treevars.o physvars.o utils.o
densities.o: treevars.o physvars.o
diagnose_tree.o: treevars.o
diagnostics.o: treevars.o physvars.o utils.o
draw2d.o: treevars.o
draw2d_hash.o: treevars.o
draw_domains.o: treevars.o
draw_lists.o: treevars.o
draw_map.o: treevars.o
draw_tree2d.o: treevars.o
dump.o: treevars.o physvars.o
energy_cons.o: treevars.o physvars.o utils.o
forces.o: treevars.o physvars.o utils.o
get_address.o: treevars.o utils.o
get_next_node.o: treevars.o utils.o
get_node.o: treevars.o utils.o
key_test.o: treevars.o utils.o
kinenergy.o: treevars.o physvars.o
make_branches.o: treevars.o utils.o
make_domains.o: treevars.o utils.o
make_hashentry.o: treevars.o utils.o
open_files.o: treevars.o
pot_grid.o: treevars.o physvars.o
potenergy.o: physvars.o treevars.o utils.o
predef_parts.o: treevars.o physvars.o utils.o
push.o: treevars.o
setup.o: treevars.o physvars.o utils.o
setup_arrays.o: treevars.o physvars.o utils.o
slices.o: treevars.o physvars.o
stars.o: treevars.o utils.o physvars.o
stars_save.o: treevars.o utils.o physvars.o
sum_force.o: treevars.o
sumpot.o: treevars.o
tree_build.o: treevars.o utils.o
tree_fill.o: treevars.o utils.o
tree_prefetch.o: treevars.o utils.o
tree_properties.o: treevars.o utils.o
tree_walk.o: treevars.o utils.o
treemp.o: treevars.o utils.o physvars.o
treevars.o: my_mpidefs.o
utils.o: my_mpidefs.o
velocities.o: treevars.o utils.o
vis_fields.o: treevars.o physvars.o
vis_parts.o: treevars.o physvars.o
vis_steer.o: treevars.o physvars.o utils.o


