#
#  Makefile for treemp and test programs
#

PREFIX = ..

#  Get machine-dependent flags

ARCH = ibm-p690
#ARCH = linux
#ARCH = bgl

include $(ARCH).mk


#  -----------------------------------------------------------------------------------------
#  You shouldn't need to edit anything below here unless you're adding new source code
#   - change machine/compiler options in the ARCH.mk file
#
#  -----------------------------------------------------------------------------------------

FFLAGS =  $(FFLAGS1) $(DB) $(PG) $(TUNE)
DFLAGS = $(FFLAGS1) $(DB) 
PPFLAGS = $(PREPROC)
LDFLAGS =  $(XNBODYLIBS) $(VISITLIBS) $(NETCDFLIB) $(MPITRACE) 
CFLAGS = $(CFLAGS1)

.SUFFIXES: .f90 .F90


# -------------------------------------------------------------------------------------------

# Source files

# -------------------------------------------------------------------------------------------

PPSRC.F90 = pepcb.F90 vis_parts_nbody.F90 vis_fields_nbody.F90 vis_control.F90
PPSRC.f90 = $(PPSRC.F90:.F90=.f90) # processed source files 

MODULES.f90 =   physvars.f90 

SOURCES.f90 =   \
                setup.f90 setup_arrays.f90 stamp.f90 \
                configure.f90 randion.f90 predef_parts.f90 maxwell1.f90 cold_start.f90 \
                special_start.f90 constrain.f90 cutvector.f90 face.f90 \
                scramble_v.f90 reset_ions.f90 add_electrons.f90 double_target.f90 \
                laser.f90 beam.f90 beam_dust.f90 rezone.f90\
                mc_config.f90 \
                velocities.f90 \
                energy_cons.f90 potenergy.f90 kinenergy.f90\
                force_laser.f90 \
                fpond.f90 empond.f90 emplane.f90 laser_bullet.f90 emoblique.f90 \
                push_em.f90 push_full3v.f90 \
                push.f90 reinject.f90 earth_plate.f90 add_ramp.f90 \
                vis_fields.f90 dump.f90 param_dump.f90 diagnostics.f90 \
                open_files.f90 close_files.f90  \
                densities.f90 sum_fields.f90 dump_fields.f90 \
                track_nc.f90 \
                integrator.f90 abort.f90 \
	        error_test.f90 force_direct.f90

# -------------------------------------------------------------------------------------------

# Names of application object files derived from sources

appobjs = $(PPSRC.F90:.F90=.o) $(SOURCES.f90:.f90=.o) $(NCOBJS)
appmods =  $(MODULES.f90:.f90=.o)
mods = $(appmods)

default: lpepc pepcb
pkojak: lpepc pepck  


#  preprocessor rules

.F90.f90: 
	@echo "Preprocessing $<"
	$(CPP)  $(PPFLAGS) $< $@

#  compile rules

.f90.o:   
	$(FC) -c $(FFLAGS) $(VISITLIBS) $(DBFLAGS) $<

#  explicit rules for f90 modules to avoid conflict with built-in ones
physvars.o: 
	$(FC) -c $(FFLAGS) $(VISITLIBS) $(DBFLAGS) physvars.f90

.c.o:   
	$(CC) -c $(CFLAGS) -q64 $<



# -----------------------------------------------------------------------------------------
#  targets

pepcb:	$(appmods) $(appobjs) liblpepc.a
	@echo "\n Creating pepcb ...\n"
	$(FC)  $(FFLAGS)  -o $@ $(appobjs) $(appmods) $(LIBPEPC) $(IBMLIB) $(LDFLAGS) $(LIBSF_MPI) 
	@echo "... done\n"

debug: $(appmods) $(appobjs) lpepc
	@echo "\n Creating pepc_debug ...\n"
	$(FC)  $(DFLAGS)  -o pepc_debug $(appobjs) $(appmods) $(LIBPEPC) $(IBMLIB) $(LDFLAGS) $(LIBSF_MPI) 
	 @echo "... done\n"

pepcb_prod:	$(appmods) $(appobjs) lpepc
	@echo "\n Creating pepcb ...\n"
	$(FC)  $(FFLAGS)  -o $@ $(appobjs) $(appmods) $(LIBPEPC) $(IBMLIB) $(LDFLAGS) $(LIBSF_MPI)  
	@echo "... done\n"

# Update PEPC library and headers
lpepc:  
	@echo 'Copying machine options from $(ARCH).mk'
	cp $(ARCH).mk ../lpepcsrc/arch.mk
	cd ../lpepcsrc; make lpepc; cd ../pepc-b
	/bin/ln -sf $(PREFIX)/lpepcsrc/liblpepc.a $(PREFIX)/pepc-b/liblpepc.a
	/bin/ln -sf $(PREFIX)/lpepcsrc/*.opari.inc $(PREFIX)/pepc-b/.
	/bin/ln -sf $(PREFIX)/lpepcsrc/treevars.mod $(PREFIX)/pepc-b/treevars.mod
	/bin/ln -sf $(PREFIX)/lpepcsrc/utils.mod $(PREFIX)/pepc-b/utils.mod


pepck:	$(appobjs) $(appmods) $(pepcmods) liblpepc.a
	@echo "\n Creating pepc application binary ...\n"
	$(FC)  $(FFLAGS) $(LDFLAGS) $(LIBPEPC) -o $@ $(appobjs) $(appmods) $(pepcmods)
	@echo "... done\n"




rand:	 rantest.o
	$(FC) $(FFLAGS) -o rand rantest.o

clean:  cleanapp cleanlib

cleanapp:
	@echo "Cleaning application binaries .."; /bin/rm -f bin/*.o   *% *~ bin/key rand *.o *.pif core *.a *.mod opari.rc *.mod.F90 *.opari.inc
	@echo "Cleaning postprocessed sources .."; /bin/rm -f  $(PPSRC.f90)

cleanlib:
	@echo "Cleaning lpepc library .." 
	cd ../lpepcsrc;	/bin/rm -f *.o *.mod.F90 *.opari.inc; cd -

cleancore: 	
	/bin/rm $(pepcobjs) 

cleandata: 
	/bin/rm -f fort.* *.dat *.out *.gle 

depend:
	$(F90DEP)

### DO NOT DELETE OR EDIT THIS LINE
# Everything from here on down is generated by f90depend
# so do NOT add any translation rules below here.

#--- Include-Dependencies

