# call before compilation to activate GNU Compiler Collection instead of Intel compiler:
#  > module unload intel parastation
#  > module load parastation/mpi2-gcc-mt-5.0.26-1 GCC

MOD_UNLOAD = intel parastation
MOD_LOAD   = parastation/mpi2-gcc-mt-5.0.26-1 GCC

HELP = "\
\# Makefile for JuRoPa using gcc\n\
\# recommended module commands\n\
module unload $(MOD_UNLOAD); module load $(MOD_LOAD)\
"

MACH     = JUROPA_gcc

DEBUG    = 0

RANLIB   = ranlib

MAKE     = make

AR       = ar
ARFLAGS  = -rs

CPP      = cpp
CPPFLAGS = -P -C -DSVNREVISION="\"$(SVNREVISION)\""

INLINING = -ftree-vectorize -ftree-vectorizer-verbose=2 -fdump-ipa-inline -finline-functions-called-once -fearly-inlining -finline-limit=120000 --param large-function-insns=120000 --param large-unit-insns=120000 --param large-function-growth=1000 --param inline-unit-growth=1000 --param max-inline-insns-recursive-auto=120000 --param max-inline-recursive-depth-auto=500 -fipa-matrix-reorg -findirect-inlining -mstringop-strategy=unrolled_loop
# -flto # deactivated since it lead to problems with MPI_IN_PLACE
# -flto-partition=none
#-fwhopr
INLINING = -ftree-vectorize -ftree-vectorizer-verbose=2 -fdump-ipa-inline -finline-functions-called-once -fearly-inlining -finline-limit=120000 -fipa-matrix-reorg -findirect-inlining -mstringop-strategy=unrolled_loop

ifeq ($(DEBUG), 1)
  FFLAGS   = -Wall -O0 -pg -g -ffree-line-length-none -fbounds-check -frange-check -fbacktrace -fvar-tracking -pthread -C -Wconversion
  CFLAGS   = -g -pg -O0
  LDFLAGS  = -g -pg -O0
else
  FFLAGS   = -g -Wall -O3        -ffree-line-length-none $(INLINING)
  CFLAGS   = -g -Wall -O3
  LDFLAGS  = -g -pthread -O3 $(INLINING) -fwhole-program 
  CPPFLAGS += -DNDEBUG
endif

FCPRE    = 
FC       = mpif90 -fopenmp

CCPRE    = 
CC       = mpicc

LDPRE    = 
LD       = mpif90 -fopenmp

LDLIBS   += 

RM       = rm -rf

