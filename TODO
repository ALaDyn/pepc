TODO-List for pepc-newstruct (partially also mentioned in code)
===============================================================

- split datatypes into t_leaf and t_twig. Then, every twig should be able to contain a number of sub-twigs and/or leaves. 
    --> leaves may have particle properties e.g. label, which do not make sense for twigs (and the other way round, e.g. childcode) 
    --> perform walk for all leaves below a some twig instead of particles

- make checkpointing-stuff independent of t_particle_data type

- fix pepc_fields_grid which is currently nonfunctional

- make all particle numbers, leaves, labels, etc integer*8 to support >2000000000particles

- put weighted and curve_type into cf_par

- remove mac.f90

- build infrastructure for additional parallelization approaches (SMPSs etc.)

- add bitmap for htable occupancy instead of clearing the complete htable in each timestep

- find good estimation for nppmax or make it adjustable by the user

- think about calc_force_per_particle - does it really have to be called from module_pepcfields --> possibly call it from the frontend directly

- remove further variables from treevars (e.g. tree_nodes --> module_tree)

- include HAns Peschke's work on hierarchical parallel tree construction

- see TODO's in code

- see SmallProjects and PUDG reports in wiki

- move MPI_INIT to lpepcsrc

- make module_tree_domains%restore() callable from the frontend after pepc_fields() has been called using no_backsort==.true.

- in frontend-makefiles: make clear, what can be changed and what should not be touched

- possibly join t_particle_data and t_particle_results ?

- call make_hashentry with t_hash datastructure instead of several single parameters

- move t_multipole_data%coc out of userdefined structures: the centre of charge is necessary in any case for performing the tree_walk

Renaming-List (Please add any inconsistencies that you encounter)
=================================================================
- module_htable%get_next_node() --> get_key_of_next_node() - the function returns a key, not a node number
- childcode --> flags (everywhere)
- t_multipole_data --> t_interaction_data
- t_tree_node%byte --> flags (or even separate childbyte from that)


