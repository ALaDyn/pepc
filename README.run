=======================================================
=
=	PEPC -  Pretty Efficient Parallel Coulomb-solver
=
=	Author:   Paul Gibbon
=
=======================================================



Running the code
----------------

To run PEPC,  first enter or create a run directory.  This is where all the 
main output will appear.  A number of subdirectories pe000, pe001, ... pe<P-1> must
exist or be created prior to the run, depending on the number of CPUs requested (P).

The main control options are read from a file run.h.  To introduce a new parameter, it
must be defined in treevars.f90 and included in the NAMELIST in routine setup.f90.

Example run.h:

-------------------------------------------------------------------------------------
 &pepcdata

! Configuration
!--------------

  ne = 51240				! # electrons
  ni = 51240 				! # ions

  initial_config = 1   			! sphere, radius r_sphere
 !  initial_config = 2         		! disc, r_sphere (y,z) * x_plasma (x)
 !  initial_config=3   			! wire, r_sphere (x,y) * x_plasma (z)
 !  initial_config = 0         		! rectangular slab, x_plasma * y_plasma * y_plasma (default)

  r_sphere = 1				! Sphere/disc/wire radius
  x_plasma = 1.    			! plasma slab/disc thickness/ wire length
  y_plasma = 2.     			! plasma width (slab target)
  xl = 2  				! graphics box size
  yl =2 
  zl =2 

  theta = 0.5				! Multipole acceptance criterion (s/d)
  Te_keV = 0.5 				! Electron temperature in keV
  Ti_keV =0.2 				! Ion temperature in keV
  mass_ratio = 200.			! Ion/electron mass ratio
  q_factor = 1.				! Ion/electron charge ratio (for non-neutral system)
  eps = 1.				! cutoff for Coulomb potential (c/wp)

  coulomb = .true.			! Long-range potential switch
  lenjones = .false.			! Short-range potential
  bonds = .false.			! Bonding potential

! laser/particle beam
!--------------------

   beam_config = 0 			! beam off (default)
 !  beam_config = 1  			! fixed beam, initialised at start
 ! beam_config = 2  			! user-controlled, real-time particle source
 ! beam_config=4  			! laser fpond
 
  r_beam = 0.05				! particle beam radius
  u_beam = 0.2				! beam velocity
  theta_beam = 0.0			! beam angle
  phi_beam = 0.0			! beam angle
  x_beam = .04				! beam length
  start_beam = -0.1			! beam start position
  mass_beam = 5.			! beam particle mass
  rho_beam = -1.			! beam density
  np_beam = 0 				! initial # beam particles/ dt

  vosc = 2.0				! laser amplitude (p_osc/mc)
  omega = 0.5				! laser frequency (/wp)
  sigma = 6.				! spot size (c/wp)
  tpulse = 20.				! rise-time/pulse duration (/wp)
  lambda = 1.0   			! Wavelength in microns

 
! run control
! -----------

  nt =10				! # timesteps
  dt = 0.5				! timestep (in wp^-1)
  restart = .false.			! restart switch
  vis_on = .false.			! VISIT switch
  ivis = 20 				! frequency to ship VISIT stuff (timesteps)
  ensemble = 1 				! Ensemble switch - see velocities routine
  idump = 100				! particle dump frequency
  iprot=1				! run protocol frequency
  mc_init = .false.			! MC mode switch
  mc_steps = 1000			! # steps for MC initialisation

  nmerge = 1				! Merges/expands restart files if # CPUs changed
  perf_anal=.false.			! Switch for performance analysis mode
  walk_balance=.true.			! Load balance switch

  domain_debug=.false.			!
  load_balance=.true.                    ! Debug switches for tree construction routines	
  dump_tree = .false.			! Tree dump - beware: huge output generated
  walk_debug=.false.                     !
  domain_debug=.false.
  prefetch_debug=.false.
  force_debug=.false./              
---------------------------------------------------------------------------------


Output data
===========

The output files will be stored either in the run directory or in the
subdirectories pe000 etc.  The most important of these are:

energy.dat	Kinetic and potential  energies expressed in keV PER PARTICLE 
		(10 y-columns in ASCII format)

load_XXX.dat    Shows approx load balance amoung CPUs at timestep XXX

run.out		Printed diagnostics

peNNN/parts_dump.TTTTTT		Particle dump for CPU NNN at timestep TTTTTT
				These can be merged for postprocessing with the script
				merge1_dump or merge_dump.

tree_NNN.gle	2D plot of tree structure for CPU # NNN in GLE format
tree2d.gle        

domain_NNN.gle  2D plot of branch nodes for CPU # NNN
domains.gle

list_NNNIII.gle   Interaction list of particle III on CPU NNN.  
		  Useful for checking effect of changing clumping parameter theta.

 
		    These and other .gle files can be viewed
		   using the graphics program GLE (Graphics Layout Engine),
		   currently available from Vicent LaBella at:
		   
		   http://www.uark.edu/misc/vlabella/gle/gle.html


